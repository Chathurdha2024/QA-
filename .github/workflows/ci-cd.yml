name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  backend:
    name: Backend - Build & Test (Spring Boot + MongoDB)
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Configure application properties for CI
        if: hashFiles('backend/src/main/resources/application.properties') != ''
        run: |
          echo "server.port=8081" > backend/src/main/resources/application.properties
          echo "spring.data.mongodb.uri=mongodb://localhost:27017/database1" >> backend/src/main/resources/application.properties

      - name: Build (skip tests)
        working-directory: backend
        run: mvn -B -q -DskipTests package

      - name: Run unit/integration tests
        working-directory: backend
        run: mvn -B test

      # Optional: package an artifact (JAR) for later deploy
      - name: Upload backend artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  frontend:
    name: Frontend - Build, Lint & Unit tests (Vite/React)
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            tests/package-lock.json

      - name: Install deps (frontend)
        working-directory: frontend
        run: npm ci

      - name: Build (frontend)
        working-directory: frontend
        run: npm run build

      - name: Lint (frontend)
        working-directory: frontend
        run: npm run lint || echo "No ESLint errors step configured to fail build"

      # ===== Node unit/BDD tests (Mocha/Chai/Cucumber) =====
      # Expecting a 'tests' folder at repo root with your provided package.json and tests.
      # If your package.json is elsewhere, update paths below.
      - name: Install test deps (Mocha/Chai/Selenium/Cucumber)
        if: hashFiles('tests/package.json') != ''
        working-directory: tests
        run: npm ci

      - name: Run Node unit tests (Mocha/Chai)
        if: hashFiles('tests/package.json') != ''
        working-directory: tests
        run: npm test

      - name: Run BDD tests (Cucumber.js)
        if: hashFiles('tests/package.json') != ''
        working-directory: tests
        run: npm run bdd || echo "No Cucumber features found - skipping"

      - name: Upload frontend build
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  e2e:
    name: E2E UI Tests (Selenium + Chrome)
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            tests/package-lock.json

      - name: Install deps (frontend)
        working-directory: frontend
        run: npm ci

      - name: Install test deps (tests)
        if: hashFiles('tests/package.json') != ''
        working-directory: tests
        run: npm ci

      - name: Build backend (skip tests)
        working-directory: backend
        run: mvn -B -q -DskipTests package

      - name: Start backend server
        working-directory: backend
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/database1
        run: |
          nohup mvn -q -DskipTests spring-boot:run > target/backend.log 2>&1 &
          npx --yes wait-on tcp:8081

      - name: Build frontend (Vite)
        working-directory: frontend
        run: npm run build

      - name: Start frontend preview on port 5173
        working-directory: frontend
        run: |
          nohup npx vite preview --port 5173 --strictPort > vite-preview.log 2>&1 &
          npx --yes wait-on http://localhost:5173

      # ---- Set up Chrome + Chromedriver + Xvfb for Selenium ----
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Setup Chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Start Xvfb
        run: |
          /usr/bin/Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # IMPORTANT: your selenium script currently is not headless.
      # Running inside Xvfb provides a virtual display so it can run as-is.
      - name: Run Selenium UI tests
        if: hashFiles('tests/package.json') != ''
        working-directory: tests
        env:
          DISPLAY: ":99"
          CHROME_BIN: /usr/bin/google-chrome
          CI: "true"
        run: |
          node tests/selenium/signup.test.js

      - name: Upload test screenshots (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screens
          path: |
            tests/*.png
            tests/**/*.png
          if-no-files-found: ignore

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [frontend, e2e]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Example 1: Deploy frontend to GitHub Pages (optional)
      # NOTE: Requires Pages to be enabled in repo settings; Vite base config may be needed.
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
      #
      # - name: Download frontend artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: frontend-dist
      #     path: ./dist
      #
      # - name: Upload Pages artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: ./dist
      #
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4

      # Example 2: Deploy backend JAR to your server/host (placeholder)
      # Replace with your real deployment (Heroku, Render, Railway, EC2, etc.)
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./deploy

      - name: Deploy placeholder
        run: |
          echo "âœ… All checks passed. Replace this step with your real deployment (e.g., Heroku CLI, SCP to server, Docker push, etc.)"
